<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" usePreloader="false" applicationComplete="init()"  layout="absolute" xmlns:ns1="*" currentState="notloggedin" width="400" height="300"  mouseDown="onAppMouseDown(event);">
	<mx:constraintColumns>
		<mx:ConstraintColumn id="Application1_col1" width="55.8%"/>
		<mx:ConstraintColumn id="Application1_col2" width="44.2%"/>
	</mx:constraintColumns>
	<mx:Style>
		Application {
			background-color:""; 
      		background-image:""; 
      		padding: 0px;
		}
	</mx:Style>
	<mx:Script>
		<![CDATA[
			import mx.core.IUIComponent;
			import mx.managers.DragManager;
			import mx.events.CloseEvent;
			import mx.binding.utils.BindingUtils;
			import com.fwscott.webapis.smugmug.v1_2_1.events.SmugMugResultEvent;
			import mx.collections.ArrayCollection;
			import com.fwscott.webapis.smugmug.v1_2_1.SmugMugService;
		
			// TODO: massive cleanup, doesnt have to be refactored but at least organized
			
			[Bindable]
			private var filesToUpload:ArrayCollection;
			private var service:SmugMugService;
			
			private var maxSize:Number;
			
			[Bindable]
			private var appMenu:NativeMenu;
			
			private var tryingToClose:Boolean;
			
			[Bindable]
			private var uploadCount:int = 0;
			
			private var albumsMenu:NativeMenu;
			[Bindable]
			private var albums:ArrayCollection;
			
			private var _selectedDefaultAlbum:Object;
			
			[Bindable]
			private var statusString:String = "";
			
			private var keepOnTopMenuItem:NativeMenuItem;
			
			private var windowMenu:NativeMenu;
			
			private var fileBrowser:FileReferenceList;
			
			public function set title(val:String):void {
				this.stage.nativeWindow.title = val;
			}
			private function get alwaysInFront():Boolean {
				return stage.nativeWindow.alwaysInFront;
			}
			private function set alwaysInFront(val:Boolean):void {
				stage.nativeWindow.alwaysInFront = val;
				keepOnTopMenuItem.checked = val;
				
			}
			private function onClosing(event:Event):void {
				if(currentState=="loggedin") {
					service.logout();
					tryingToClose = true;
					event.preventDefault();
				}
				var lso:SharedObject = SharedObject.getLocal("locationData");
				lso.data.x = stage.nativeWindow.x;
				lso.data.y = stage.nativeWindow.y;	
				
			}
					
			private function init():void {
				filesToUpload = new ArrayCollection();
				albumsMenu = new NativeMenu();
				buildWindowMenu();
				fileBrowser = new FileReferenceList();
				title = "NASMU";
				fileBrowser.addEventListener(Event.SELECT, onFileBrowserSelect);
				stage.nativeWindow.addEventListener(Event.CLOSING,onClosing);
				service = new SmugMugService("rXcjRmeEXiGS6gkjWunJdLPVuUuwNkx4",false);
				service.addEventListener(SmugMugResultEvent.LOGIN_WITHPASSWORD, onLogin);
				service.addEventListener(SmugMugResultEvent.ALBUMS_GET, onGetAlbums);
				service.addEventListener(SmugMugResultEvent.LOGOUT, onLogout);
				albums = new ArrayCollection();
				var loginSharedObj:SharedObject = SharedObject.getLocal("loginInfo");
				if(loginSharedObj.size > 0) {
					service.addEventListener(SmugMugResultEvent.LOGIN_WITHHASH, onLogin);
					statusString = "Auto Logging In";
					service.login.withHash(loginSharedObj.data.userID,loginSharedObj.data.passwordHash);
					loginBTN.enabled=false;
				}
				alwaysInFront = true;
				var keepOnTopSO:SharedObject = SharedObject.getLocal("keepOnTop");
				if(keepOnTopSO.size > 0)
					alwaysInFront = keepOnTopSO.data.value;
				var locationSO:SharedObject = SharedObject.getLocal("locationData");					
				if(locationSO.size > 0) {
					stage.nativeWindow.x = locationSO.data.x;
					stage.nativeWindow.y = locationSO.data.y;
				}
			}
			
			private function buildWindowMenu():void {
				windowMenu = new NativeMenu();
				keepOnTopMenuItem = windowMenu.addItem(new NativeMenuItem("Keep on Top"));
				windowMenu.addItem(new NativeMenuItem("",true));
				windowMenu.addItem(new NativeMenuItem("Minimize")).addEventListener(Event.SELECT,onMinimizeSelect);
				windowMenu.addItem(new NativeMenuItem("Exit")).addEventListener(Event.SELECT,onExitSelect);				

				keepOnTopMenuItem.addEventListener(Event.SELECT, onKeepOnTopSelect);
			}
			private function onLoginWithHash(event:SmugMugResultEvent):void {
				
			}
			
			private function onLogout(event:SmugMugResultEvent):void {
				currentState = "notloggedin";
				if(tryingToClose==true) {
					stage.nativeWindow.close();
				}
			}
			private function buildAppMenu():void {
				appMenu = new NativeMenu();
				appMenu.addSubmenu(albumsMenu,"Set Default Album");
				appMenu.addItem(new NativeMenuItem("Browse for files")).addEventListener(Event.SELECT, onBrowseForFilesSelect);
				appMenu.addItem(new NativeMenuItem("",true));
				appMenu.addItem(new NativeMenuItem("Logout")).addEventListener(Event.SELECT, onLogoutSelect);								
				
				
/* 				if(NativeWindow.supportsMenu)
					stage.nativeWindow.menu = appMenu;
				if(Shell.supportsMenu)
					Shell.shell.menu = appMenu;
 */				
			}	
			
			private function onFileBrowserSelect(event:Event):void {
				var files:Array = fileBrowser.fileList;
				for each (var f:FileReference in files) {
					addFile(  f  );
					service.images.upload(f,selectedDefaultAlbum.id,"");
				}
			}
			private function onBrowseForFilesSelect(event:Event):void {
				fileBrowser.browse();
			}
			
			private function onLogoutSelect(event:Event):void {
				var lso:SharedObject = SharedObject.getLocal("loginInfo");
				lso.clear();
				statusString = "";
				service.logout();
			}		
			private function login(username:String, password:String):void {
				service.login.withPassword(username, password);	
				statusString = "Logging In";	
				loginBTN.enabled=false;		
			}
			private function onLogin(event:SmugMugResultEvent):void {
				if(event.success) {
					currentState="loggedin";
					service.sessionID = event.data.login.Login.Session.id;
					service.albums.get(null,true);
					buildAppMenu();	
					statusString = "Ready for files";	
					if(rememberMeCheck.selected==true) {
						var lso:SharedObject = SharedObject.getLocal("loginInfo");
						lso.data.userID = event.data.login.Login.User.id;
						lso.data.passwordHash = event.data.login.Login.PasswordHash;
						lso.flush();
					}
				}
				else {
					
					statusString = "Invalid Login";
				}
				loginBTN.enabled=true;
			}
			
			private function onGetAlbums(event:SmugMugResultEvent):void {
				albums.source = event.data.Albums as Array;
				rebuildAlbumsMenu();
				if(albums.length > 0)
					selectedDefaultAlbum = albums.getItemAt(0);
				else
					selectedDefaultAlbum = null;
			}

			private function rebuildAlbumsMenu():void {
				var len:int = albumsMenu.items.length;
				var item:NativeMenuItem;
				for each(item in albumsMenu.items) {
					if(item != null) {
						item.removeEventListener(Event.SELECT, onAlbumMenuItemSelect);
						item.data = null;
					}
					albumsMenu.removeItem(item);
				}
				for(var i:int=0; i < albums.length; i++) {
					item = new NativeMenuItem(albums.getItemAt(i).Title);
					item.data = albums.getItemAt(i);
					item.addEventListener(Event.SELECT, onAlbumMenuItemSelect);
					albumsMenu.addItem(item);
				}
			}
			
			[Bindable]
			private function get selectedDefaultAlbum():Object {
				return _selectedDefaultAlbum;
			}
			private function set selectedDefaultAlbum(obj:Object):void {
				for each(var item:NativeMenuItem in albumsMenu.items)
					item.checked = (item.data == obj);
				_selectedDefaultAlbum = obj;				
			}			
			private function onAlbumMenuItemSelect(event:Event):void {
				selectedDefaultAlbum = event.currentTarget.data;
			}	
					
			private function onKeepOnTopSelect(event:Event):void {
				alwaysInFront = !alwaysInFront;
				var keepOnTopSO:SharedObject = SharedObject.getLocal("keepOnTop");			
				keepOnTopSO.data.value = alwaysInFront;
			}
	        private function onDragEnter( event:NativeDragEvent ) :void
	        {
	        	if(currentState=="loggedin")
	           		NativeDragManager.acceptDragDrop(event.currentTarget as InteractiveObject);
	        }
	
	        private function onDragDrop( event:NativeDragEvent ) :void
	        {
	            NativeDragManager.dropAction = NativeDragActions.COPY;
	            var files:Array = event.clipboard.getData(flash.desktop.ClipboardFormats.FILE_LIST_FORMAT) as Array;
	            for each (var f:File in files)
	            {
	               addFile( FileReference( f ) );
	               service.images.upload(f,selectedDefaultAlbum.id,"");
	            }
	        }
	
	        private function addFile( fileRef:FileReference ) :void
	        {
	        	var tmpObj:Object = new Object();
	        	tmpObj.fileRef = fileRef;
	        	tmpObj.label = fileRef.name;
	            filesToUpload.addItem( tmpObj );
	
/* 	            var fileComponent:FileStatusComponent = new FileStatusComponent();
	            //UploadProgressComponents.push( upv );
	            statusComVB.addChild( fileComponent );
	            fileComponent.label = fileRef.name;
	            fileComponent.fileRef = fileRef;
	*/
	            fileRef.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA,completeHandler);
//	            fileRef.addEventListener( IOErrorEvent.IO_ERROR, ioErrorHandler );
 	        }
	
	        private function completeHandler( e:Event ) :void
	        {
	            var f:FileReference = FileReference(e.target);
	            for( var i:uint; i < filesToUpload.length; i++ )
	            {
	                if( f == filesToUpload.getItemAt(i).fileRef )
	                {
	                   // statusComVB.removeChild( UploadProgressComponents[i] );
	                   filesToUpload.removeItemAt(i);
	                   uploadCount++;
	                    //filesToUpload.splice(i, 1);
	                    //UploadProgressComponents.splice(i, 1);
	                }
	            }
	        }
	
	        private function ioErrorHandler( event:IOErrorEvent ) :void
	        {
	            trace("ioErrorHandler: " + event);
	        }			
	        
	        private function onAppMouseDown(event:MouseEvent):void {
	        	stage.nativeWindow.startMove();
	        }
	        
	        private function onLeftEyeClick(event:MouseEvent):void {
	        	appMenu.display(this.stage,event.stageX,event.stageY);
	        }
	        
	        private function onRightEyeClick(event:MouseEvent):void {
	        	windowMenu.display(stage,event.stageX,event.stageY);
	        }
	        
	        private function onMinimizeSelect(event:Event):void {
	        	stage.nativeWindow.minimize();
	        }
	        private function onExitSelect(event:Event):void {
	        	var e:Event = new Event(Event.CLOSING,true,true);
	        	stage.nativeWindow.dispatchEvent(e);
	        	if(!e.isDefaultPrevented())
	        		stage.nativeWindow.close();
	        }
		]]>
	</mx:Script>
	<mx:Image x="0" y="0" width="100%" height="100%" source="@Embed('/resources/interface.png')"/>
	<mx:Button width="17" alpha="0" useHandCursor="true" click="onRightEyeClick(event)" left="Application1_col2:32" top="27" toolTip="Window Options" id="button1"/>
	<mx:Label x="287" y="84" text="{statusString}" width="94" id="label1"/>
	<mx:states>
		<mx:State name="notloggedin">
			<mx:AddChild position="lastChild">
				<mx:Label x="96" y="162" text="Username"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="96" y="188" text="Password"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:TextInput x="166" y="160" id="usernameTxt"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:TextInput x="166" y="186" id="passwordTxt" displayAsPassword="true"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Button x="270" y="216" label="Login" click="login(usernameTxt.text,passwordTxt.text)" id="loginBTN"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:CheckBox x="96" y="217" label="Remember me" id="rememberMeCheck"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="96" y="125" text="Please Login" width="230" fontWeight="bold"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="loggedin">
			<mx:AddChild position="lastChild">
				<mx:Label x="81.5" y="253" text="Selected Album: " width="286" fontWeight="bold"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:TileList x="53.5" y="111" height="143" itemRenderer="FileStatusRenderer" dataProvider="{filesToUpload}" width="301" borderThickness="0" backgroundAlpha="0"  nativeDragEnter="onDragEnter(event)" nativeDragDrop="onDragDrop(event)"></mx:TileList>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Button x="115" y="27" width="19" click="onLeftEyeClick(event)" alpha="0" toolTip="Application Options"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="179" y="252" text="{selectedDefaultAlbum.Title}" width="172"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="173" y="94" text="Uploaded: " visible="{uploadCount &gt; 0}"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="231" y="94" text="{uploadCount}" width="48" visible="{uploadCount &gt; 0}"/>
			</mx:AddChild>
		</mx:State>
	</mx:states>
</mx:Application>
